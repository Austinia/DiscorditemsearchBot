"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserManager = void 0;
const Collection_1 = __importDefault(require("../utils/Collection"));
const User_1 = require("../structures/User");
const utils_1 = require("../utils");
const defaultCacheMaxSize = 100;
const defaultCacheMaxAge = 60000 * 60;
class UserManager {
    constructor(koreanbots, options) {
        var _a, _b, _c, _d;
        this.koreanbots = koreanbots;
        this.options = options;
        this.options = options !== null && options !== void 0 ? options : { cache: {} };
        const optionsProxy = new Proxy(this.options, utils_1.CacheOptionsValidator());
        optionsProxy.cache.max = (_b = (_a = options === null || options === void 0 ? void 0 : options.cache) === null || _a === void 0 ? void 0 : _a.max) !== null && _b !== void 0 ? _b : defaultCacheMaxSize;
        optionsProxy.cache.maxAge = (_d = (_c = options === null || options === void 0 ? void 0 : options.cache) === null || _c === void 0 ? void 0 : _c.maxAge) !== null && _d !== void 0 ? _d : defaultCacheMaxAge;
        this.cache = new Collection_1.default({
            max: this.options.cache.max,
            maxAge: this.options.cache.maxAge
        });
    }
    async fetch(userID, options = { cache: true, force: false }) {
        if (!userID || typeof userID !== "string")
            throw new Error(`"userID" 값은 주어지지 않았거나 문자열이어야 합니다. (받은 타입: ${typeof userID})`);
        const cache = this.cache.get(userID);
        if (!(options === null || options === void 0 ? void 0 : options.force) && cache)
            return cache;
        const res = await this.koreanbots.api().users(userID).get();
        if (!res.data)
            throw new Error(res.message || `API에서 알 수 없는 응답이 돌아왔습니다. ${JSON.stringify(res.data)}`);
        const user = new User_1.User(this.koreanbots, res.data);
        if (options.cache)
            this.cache.set(userID, user);
        return user;
    }
}
exports.UserManager = UserManager;
//# sourceMappingURL=UserManager.js.map