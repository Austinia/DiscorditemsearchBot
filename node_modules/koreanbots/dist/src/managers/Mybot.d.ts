import { Bot } from "../structures/Bot";
import type { Koreanbots } from "../client/Koreanbots";
import type { Vote } from "../utils/types";
import LifetimeCollection from "../utils/Collection";
export interface UpdateResponse {
    code: number;
    version: number;
    message: string;
    servers?: number;
}
export declare class Mybot {
    readonly koreanbots: Koreanbots;
    readonly clientID: string;
    bot: Bot | null;
    lastGuildCount?: number;
    updatedAt?: Date;
    updatedTimestamp?: number;
    votes: LifetimeCollection<string, Vote>;
    /**
     * 새로운 Mybot 인스턴스를 생성합니다.
     * @param koreanbots
     * @param clientID
     */
    constructor(koreanbots: Koreanbots, clientID: string);
    protected mybotInit(): Promise<Bot>;
    /**
     * 해당 유저가 내 봇에 하트를 눌렀는지 체크합니다. (cache TTL: 10초)
     * @param id
     * @returns
     * @example
     * ```js
     * koreanbots.mybot.checkVote("12345678901234567")
     *     .then(voted => {
     *         if (voted) return message.channel.send(`${message.author} 님, 하트를 눌러주셔서 감사합니다!`)
     *
     *         return message.channel.send(`${message.author} 님, 하트를 아직 누르지 않으셨습니다.`)
     *     })
     * ```
     */
    checkVote(id: string): Promise<Vote>;
    /**
     * 봇의 서버 수를 업데이트합니다.
     * @example
     * ```js
     * koreanbots.mybot.update({ servers: client.guilds.cache.size })
     * ```
     */
    update({ servers, shards }: {
        servers?: number;
        shards?: number;
    }): Promise<UpdateResponse>;
}
