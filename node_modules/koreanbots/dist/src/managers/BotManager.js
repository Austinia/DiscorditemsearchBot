"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotManager = void 0;
const Collection_1 = __importDefault(require("../utils/Collection"));
const Bot_1 = require("../structures/Bot");
const utils_1 = require("../utils");
const defaultCacheMaxSize = 100;
const defaultCacheMaxAge = 60000 * 60;
class BotManager {
    /**
     * 새로운 BotManager 인스턴스를 만듭니다.
     * @param koreanbots
     * @param options
     * @example
     * ```js
     * new BotManager(
     *     new Koreanbots({
     *         // ...
     *     })),
     *     {
     *         cache: {
     *             max: 150,
     *             maxAge: 60000
     *         }
     *     }
     * )
     * ```
     */
    constructor(koreanbots, options) {
        var _a, _b, _c, _d;
        this.koreanbots = koreanbots;
        this.options = options;
        this.options = options !== null && options !== void 0 ? options : { cache: {} };
        const optionsProxy = new Proxy(this.options, utils_1.CacheOptionsValidator());
        optionsProxy.cache.max = (_b = (_a = options === null || options === void 0 ? void 0 : options.cache) === null || _a === void 0 ? void 0 : _a.max) !== null && _b !== void 0 ? _b : defaultCacheMaxSize;
        optionsProxy.cache.maxAge = (_d = (_c = options === null || options === void 0 ? void 0 : options.cache) === null || _c === void 0 ? void 0 : _c.maxAge) !== null && _d !== void 0 ? _d : defaultCacheMaxAge;
        this.cache = new Collection_1.default({
            max: this.options.cache.max,
            maxAge: this.options.cache.maxAge
        });
    }
    /**
     * 봇을 불러옵니다.
     * @param botID
     * @param options
     * @returns {Promise<Bot>}
     * @example
     * ```js
     * koreanbots.bots.fetch("12345678901234567")
     *     .then(bot => console.log(`${bot.name} 봇을 불러왔습니다!`))
     *     .catch(err => console.error(`다음 오류로 인해 봇을 불러오는 것에 실패 했습니다. ${err.stack}`))
     * ```
     * @example
     * ```js
     * koreanbots.bots.fetch("12345678901234567", { force: true })
     *     .then(bot => console.log(`캐시를 무시하고 ${bot.name} 봇을 불러온 후, 캐시에 저장 했습니다.`))
     *     .catch(err => console.error(`다음 오류로 인해 봇을 불러오는 것에 실패 했습니다. ${err.stack}`))
     * ```
     * @example
     * ```js
     * koreanbots.bots.fetch("12345678901234567", { cache: false, force: true })
     *     .then(bot => console.log(`캐시를 무시하고 ${bot.name} 봇을 불러왔으며, 캐시에 저장하지 않았습니다.`))
     *     .catch(err => console.error(`다음 오류로 인해 봇을 불러오는 것에 실패 했습니다. ${err.stack}`))
     * ```
     */
    async fetch(botID, options = { cache: true, force: false }) {
        if (!botID || typeof botID !== "string")
            throw new Error(`"botID" 값은 주어지지 않았거나 문자열이어야 합니다. (받은 타입: ${typeof botID})`);
        const cache = this.cache.get(botID);
        if (!(options === null || options === void 0 ? void 0 : options.force) && cache)
            return cache;
        const res = await this.koreanbots.api().bots(botID).get();
        if (res.code !== 200 || !res.data)
            throw new Error(res.message || `API에서 알 수 없는 응답이 돌아왔습니다. ${JSON.stringify(res.data)}`);
        const bot = new Bot_1.Bot(this.koreanbots, res.data);
        if (options.cache)
            this.cache.set(botID, bot);
        return bot;
    }
}
exports.BotManager = BotManager;
//# sourceMappingURL=BotManager.js.map