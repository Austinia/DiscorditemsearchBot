import LifetimeCollection from "../utils/Collection";
import { Bot } from "../structures/Bot";
import type { BotManagerOptions, Nullable, FetchOptions } from "../utils/types";
import type { Koreanbots } from "../client/Koreanbots";
export declare class BotManager {
    readonly koreanbots: Koreanbots;
    readonly options?: BotManagerOptions | undefined;
    cache: LifetimeCollection<string, Nullable<Bot>>;
    /**
     * 새로운 BotManager 인스턴스를 만듭니다.
     * @param koreanbots
     * @param options
     * @example
     * ```js
     * new BotManager(
     *     new Koreanbots({
     *         // ...
     *     })),
     *     {
     *         cache: {
     *             max: 150,
     *             maxAge: 60000
     *         }
     *     }
     * )
     * ```
     */
    constructor(koreanbots: Koreanbots, options?: BotManagerOptions | undefined);
    /**
     * 봇을 불러옵니다.
     * @param botID
     * @param options
     * @returns {Promise<Bot>}
     * @example
     * ```js
     * koreanbots.bots.fetch("12345678901234567")
     *     .then(bot => console.log(`${bot.name} 봇을 불러왔습니다!`))
     *     .catch(err => console.error(`다음 오류로 인해 봇을 불러오는 것에 실패 했습니다. ${err.stack}`))
     * ```
     * @example
     * ```js
     * koreanbots.bots.fetch("12345678901234567", { force: true })
     *     .then(bot => console.log(`캐시를 무시하고 ${bot.name} 봇을 불러온 후, 캐시에 저장 했습니다.`))
     *     .catch(err => console.error(`다음 오류로 인해 봇을 불러오는 것에 실패 했습니다. ${err.stack}`))
     * ```
     * @example
     * ```js
     * koreanbots.bots.fetch("12345678901234567", { cache: false, force: true })
     *     .then(bot => console.log(`캐시를 무시하고 ${bot.name} 봇을 불러왔으며, 캐시에 저장하지 않았습니다.`))
     *     .catch(err => console.error(`다음 오류로 인해 봇을 불러오는 것에 실패 했습니다. ${err.stack}`))
     * ```
     */
    fetch(botID: string, options?: FetchOptions): Promise<Bot>;
}
