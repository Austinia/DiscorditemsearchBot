"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const discord_js_1 = require("discord.js");
const Base_1 = require("./Base");
const types_1 = require("../utils/types");
const Github_1 = require("./Github");
const Utils = __importStar(require("../utils"));
class User extends Base_1.Base {
    constructor(koreanbots, data) {
        super();
        this.koreanbots = koreanbots;
        this.id = data.id;
        this.flags = data.flags;
        this.github = data.github ? new Github_1.Github(this.koreanbots, data.github) : null;
        this.username = data.username;
        this.tag = `${data.username}#${data.tag}`;
        this.bots = new discord_js_1.Collection(data.bots.map(bot => {
            const id = typeof bot === "string" ? bot : bot.id;
            return [id, this.koreanbots.bots.cache.get(id)];
        }));
        this.cacheAfterCacheMiss();
    }
    async cacheAfterCacheMiss() {
        if (!this.bots.filter(f => !f).size)
            return;
        process.nextTick(async () => {
            await Utils.waitFor(1000);
            const botsFromApi = await Promise.all(this.bots.filter(e => !e).map((v, k) => this.koreanbots.bots.fetch(k)));
            const cache = (bot) => {
                if (!bot)
                    return;
                this.bots.set(bot === null || bot === void 0 ? void 0 : bot.id, this.koreanbots.bots.cache.get(bot === null || bot === void 0 ? void 0 : bot.id));
            };
            botsFromApi.map(cache);
        });
    }
    is(type) {
        if (typeof type === "number") {
            if (type === 0)
                return true;
            return !!(this.flags & type);
        }
        if (types_1.UserFlags[type] === 0)
            return true;
        return !!(this.flags & types_1.UserFlags[type]);
    }
    async fetch() {
        const user = await this.koreanbots.api().users(this.id).get();
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return new User(this.koreanbots, user.data);
    }
}
exports.User = User;
//# sourceMappingURL=User.js.map