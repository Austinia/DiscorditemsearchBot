"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Koreanbots = void 0;
const Constants_1 = require("../utils/Constants");
const APIRouter_1 = __importDefault(require("../rest/APIRouter"));
const Mybot_1 = require("../managers/Mybot");
const BotManager_1 = require("../managers/BotManager");
const UserManager_1 = require("../managers/UserManager");
const WidgetManager_1 = require("../managers/WidgetManager");
const defaultMaxOption = 100;
const defaultMaxAgeOption = 10000;
class Koreanbots {
    /**
     * 새로운 Koreanbots 인스턴스를 생성합니다.
     * @param options 옵션
     * @example
     * ```js
     * new Koreanbots({
     *     clientID: process.env.CLIENT_ID,
     *     apiOptions: {
     *         token: process.env.KOREANBOTS_TOKEN
     *     },
     *     // 글로벌 캐시 옵션이며, 누락할 경우 모든 캐시 옵션이 각각의 기본 값으로 설정됩니다 (로컬 캐시 옵션이 우선권을 가집니다)
     *     max: 250, // (기본값: 100) 캐시에 최대 250개의 내용을 저장
     *     maxAge: 60000 * 15, // (기본값: 10000 = 10초) 캐시에 저장한 내용을 15분 뒤에 삭제합니다.
     *     users: {
     *         cache: { // 이 캐시 설정은 로컬이므로 앞서 적은 글로벌 캐시 옵션보다 우선권을 갖습니다.
     *             max: 500, // (기본값: 100)
     *             maxAge: 60000 * 30 // (기본값: 60000 * 60)
     *         }
     *     }
     * })
     * ```
     */
    constructor(options) {
        var _a, _b, _c;
        this.options = options;
        Object.defineProperty(this, "api", {
            writable: false,
            value: APIRouter_1.default((_a = this.options.api) !== null && _a !== void 0 ? _a : {})
        });
        const optionsProxy = new Proxy(this.options, Koreanbots.validator());
        optionsProxy.clientID = options.clientID;
        this.options.max = (_b = options.max) !== null && _b !== void 0 ? _b : defaultMaxOption;
        this.options.maxAge = (_c = options.maxAge) !== null && _c !== void 0 ? _c : defaultMaxAgeOption;
        this.bots = new BotManager_1.BotManager(this, this.getOptions(options.bots));
        this.users = new UserManager_1.UserManager(this, this.getOptions(options.users));
        this.widgets = new WidgetManager_1.WidgetManager(this, this.getOptions(options.widgets));
        this.mybot = new Mybot_1.Mybot(this, options.clientID);
    }
    /**
     * 로컬 캐시 옵션이 글로벌 캐시 옵션보다 우선권을 가지는 캐시 정책을 가진 옵션을 돌려줍니다.
     * @param options
     * @private
     */
    getOptions(options) {
        var _a;
        return {
            ...options,
            cache: {
                ...((_a = options === null || options === void 0 ? void 0 : options.cache) !== null && _a !== void 0 ? _a : {}),
                ...this.options
            }
        };
    }
}
exports.Koreanbots = Koreanbots;
Koreanbots.validator = () => ({
    set(obj, prop, value) {
        switch (prop) {
            case "clientID":
                if (typeof value !== "string")
                    throw new TypeError(`"clientID" 옵션은 문자열이여야 합니다. (받은 타입: ${typeof value})`);
                if (!Constants_1.snowflakeRegex.test(obj[prop]))
                    throw new TypeError("\"clientID\" 옵션은 Snowflake여야 합니다.");
                break;
        }
        obj[prop] = value;
        return true;
    }
});
//# sourceMappingURL=Koreanbots.js.map