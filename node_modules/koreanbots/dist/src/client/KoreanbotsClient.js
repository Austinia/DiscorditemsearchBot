"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _KoreanbotsClient_retryCount;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KoreanbotsClient = void 0;
const discord_js_1 = require("discord.js");
const Koreanbots_1 = require("./Koreanbots");
class KoreanbotsClient extends discord_js_1.Client {
    /**
     * 새로운 KoreanbotsClient 인스턴스를 생성합니다.
     * @param options
     * @example
     * ```js
     * const { KoreanbotsClient } = require("koreanbots")
     *
     * const client = new KoreanbotsClient({
     *     koreanbots: {
     *         // src/client/Koreanbots.ts
     *         api: {
     *             token: process.env.KOREANBOTS_TOKEN
     *         }
     *     },
     *     koreanbotsClient: {
     *         updateInterval: 60000 * 15 // 15분마다 서버 수를 업데이트
     *     }
     * })
     * ```
     */
    constructor(options) {
        super(options);
        _KoreanbotsClient_retryCount.set(this, void 0);
        this.koreanbots = null;
        /**
         * 서버 수 업데이트 루프
         * @type {NodeJS.Timeout|null}
         */
        this.koreanbotsInterval = null;
        __classPrivateFieldSet(this, _KoreanbotsClient_retryCount, 0, "f");
        this.once("ready", () => void this.ok.bind(this)());
    }
    /**
     * 불러오기 재시도
     * @private
     */
    retry() {
        __classPrivateFieldSet(this, _KoreanbotsClient_retryCount, __classPrivateFieldGet(this, _KoreanbotsClient_retryCount, "f") + 1, "f");
        if (__classPrivateFieldGet(this, _KoreanbotsClient_retryCount, "f") >= 10)
            throw new Error("KoreanbotsClient가 자동으로 서버 수를 업데이트 하는 것에 실패 했습니다.");
        return setTimeout(this.ok.bind(this), 5000);
    }
    /**
     * Koreanbots lib/interval init
     * @private
     */
    async ok() {
        var _a, _b, _c, _d, _e, _f;
        if (!((_a = this.guilds) === null || _a === void 0 ? void 0 : _a.cache.size) || !this.user)
            return this.retry();
        this.koreanbots = new Koreanbots_1.Koreanbots({
            ...this.options.koreanbots,
            clientID: (_c = (_b = this.user) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : (_d = this.options.koreanbots) === null || _d === void 0 ? void 0 : _d.clientID
        });
        const getGuildCount = () => {
            var _a, _b, _c;
            if (((_a = this.shard) === null || _a === void 0 ? void 0 : _a.count) && ((_b = this.shard) === null || _b === void 0 ? void 0 : _b.count) > 1)
                return this.shard.fetchClientValues("guilds.cache.size")
                    .then(numbers => numbers.reduce((a, c) => a + c));
            return (_c = this.guilds) === null || _c === void 0 ? void 0 : _c.cache.size;
        };
        const getShardCount = () => { var _a; return (_a = this.shard) === null || _a === void 0 ? void 0 : _a.count; };
        const servers = await getGuildCount();
        const shards = getShardCount();
        this.koreanbots.mybot.update({ servers, shards });
        this.koreanbotsInterval = setInterval(async () => {
            var _a;
            const servers = await getGuildCount();
            return await ((_a = this.koreanbots) === null || _a === void 0 ? void 0 : _a.mybot.update({ servers, shards }));
        }, (_f = (_e = this.options.koreanbotsClient) === null || _e === void 0 ? void 0 : _e.updateInterval) !== null && _f !== void 0 ? _f : 60000 * 10);
    }
}
exports.KoreanbotsClient = KoreanbotsClient;
_KoreanbotsClient_retryCount = new WeakMap();
//# sourceMappingURL=KoreanbotsClient.js.map