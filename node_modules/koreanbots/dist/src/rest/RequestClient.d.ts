/// <reference types="node" />
import { EventEmitter } from "events";
import type { Version, FetchResponse, RequestClientOptions, ProxyValidator, RequestInitWithInternals } from "../utils/types";
declare class RequestClient extends EventEmitter {
    protected readonly headers: Record<string, string>;
    readonly version: Version;
    readonly baseUri: string;
    readonly globalUri: string;
    readonly token: string;
    globalReset: null | number;
    options: RequestClientOptions;
    private _timeouts;
    private _agent?;
    private _destroyed;
    private _retries;
    protected static validator: <T>() => ProxyValidator<T>;
    constructor(options: RequestClientOptions);
    on(event: "rateLimit" | "timeout" | "request" | "serverCountUpdated", listener: (...args: unknown[]) => void): this;
    private setupReadonly;
    /**
     * @license https://github.com/discordjs/discord.js/blob/master/LICENSE
     * @see https://github.com/discordjs/discord.js/blob/d744e51c1bdb4c7a26c0faeea1f2f45baaf5fd3c/src/client/BaseClient.js#L80
     */
    private setTimeout;
    /**
     * @license https://github.com/discordjs/discord.js/blob/master/LICENSE
     * @see https://github.com/discordjs/discord.js/blob/d744e51c1bdb4c7a26c0faeea1f2f45baaf5fd3c/src/client/BaseClient.js#L93
     */
    private clearTimeout;
    destroy(): void;
    request<T = unknown>(method: string, url: string, options?: RequestInitWithInternals): Promise<FetchResponse<T>>;
}
export default RequestClient;
